// This program uses a structure variable to store a record to a file.
#include<iostream>
#include<fstream>
using namespace std;

// Declare a structure for the record.
struct Weapons
{
    char wpType[25];
    short wpDmg;
    short wpSpd;
    short wpRch;
    short defUp;
    short agiDwn;
};

int main()
{
    Weapons read;	//add weapons
    const short NUM_WEPS = 8;
    Weapons loaded[NUM_WEPS] = {{"1", 0, 0, 0, 0, 0 }, {"2", 0, 0, 0, 0, 0 }, {"3", 0, 0, 0, 0, 0 },
     {"4", 0, 0, 0, 0, 0 }, {"5", 0, 0, 0, 0, 0 }, {"6", 0, 0, 0, 0, 0 }, {"7", 0, 0, 0, 0, 0 },
     {"8", 0, 0, 0, 0, 0 }};
        char again;	

	// Open a file for binary output.
	fstream weps("weapons.dat", ios::out | ios::binary);

        
        
        for (short i = 0; i < NUM_WEPS; i++)
        {
            
            weps.write(reinterpret_cast<char *>(&loaded[i]),
			         sizeof(loaded[i]));
        }

	// Close the file.
        cout << endl << "closing the file;";
	weps.close();
        
       
        cout << endl << "opening file to read" << endl;
        // Open a file for input in binary mode.
	weps.open("weapons.dat", ios::in | ios::binary);

	// Test for errors.
	if (!weps)
	{
		cout << "Error opening file. Program aborting.\n";
		return 0;
	}

	cout << "Here are the weapons in the file: \n\n";
	// Read the first record from the file.
	weps.read(reinterpret_cast<char *>(&read),
			    sizeof(read));

	// While not at the end of the file,
	// display the records.
	while (!weps.eof())
	{
		// Display the record.
            
		cout << "Weapon Type: ";
		cout << read.wpType << endl;
                cout << "Base Damage: ";
		cout << read.wpDmg << endl;
                cout << "Weapon Speed: ";
		cout << read.wpSpd << endl;
                cout << "Weapon Reach: ";
		cout << read.wpRch << endl;
                cout << "Defensive Bonus: ";
		cout << read.defUp << endl;
                cout << "Agility loss: ";
		cout << read.agiDwn << endl;
		// Wait for the user to press the Enter key.
		cout << "\nPress the Enter key to see the next record.\n";
		cin.get();

		// Read the next record from the file.
		weps.read(reinterpret_cast<char *>(&read),
			        sizeof(read));
	} 

	// Close the file.
	cout << "That's all the data in the file!\n";
	weps.close();

        
	return 0;
}